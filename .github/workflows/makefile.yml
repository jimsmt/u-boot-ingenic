name: Build

on:
  #schedule:
    # 00:15 PST / Nightly
    #- cron:  '00 7 * * *'
  workflow_dispatch:
    inputs:
      tg_disabled:
        type: boolean
        description: 'Disable Telegram notifications'
        required: false
        default: false
      tg_scratch:
        type: boolean
        description: 'Use TG scratch channel'
        required: false
        default: false
      t31x_only:
        type: boolean
        description: 'Only build T31X profile '
        required: false
        default: false

env:
  TAG_NAME: latest
  TERM: linux
  TG_TOKEN: ${{secrets.TELEGRAM_TOKEN_BOT_THINGINO}}
  TG_CHANNEL: ${{secrets.TELEGRAM_CHANNEL_THINGINO_BUILD}}
  TG_CHANNEL_SCRATCH: ${{secrets.TELEGRAM_CHANNEL_THINGINO_SCRATCH}}
  TG_OPTIONS: -s

jobs:
  notify-begin:
    runs-on: ubuntu-latest
    outputs:
      start_time: ${{ steps.set_output.outputs.time }}
      tg_disabled: ${{ steps.set_env.outputs.tg_disabled }}
    steps:
      - name: Save workflow start time
        id: set_output
        run: echo "time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Setup Notify Environment
        run: |
          echo "TG_DISABLED=${{ github.event.inputs.tg_disabled || 'false' }}" >> $GITHUB_ENV
          echo "tg_disabled=${{ github.event.inputs.tg_disabled || 'false' }}" >> $GITHUB_OUTPUT

      - name: Send build start notifcation
        if: env.TG_DISABLED == 'false'
        run: |
          if [[ "${{ github.event.inputs.tg_scratch }}" == 'true' ]]; then
            TG_CHANNEL=${{ env.TG_CHANNEL_SCRATCH }}
          fi
          TG_MSG="u\\-boot\\-ingenic build started:\nJob: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n"
          TG_ICON="\xF0\x9F\x9A\xA6 GitHub Actions"
          TG_HEADER=$(echo -e ${TG_MSG}${TG_ICON})
          HTTP=$(curl ${TG_OPTIONS} -H "Content-Type: multipart/form-data" -X POST https://api.telegram.org/bot${TG_TOKEN}/sendMessage -F parse_mode=MarkdownV2 -F chat_id=${TG_CHANNEL} -F text="${TG_HEADER}" -F disable_web_page_preview=true)
          echo Telegram response: ${HTTP}

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: setup env test
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: "master"
          fetch-depth: "1"

      - name: Generate matrix
        id: set-matrix
        run: |
          CONFIGS=$(cat boards.cfg | grep isvp | awk '{print $1}' | grep -v -e nand)
          JSON_MATRIX="{\"u-boot-version\": ["
          for CONFIG in $CONFIGS; do
            JSON_MATRIX+="\"${CONFIG}\","
          done
          JSON_MATRIX="${JSON_MATRIX%,}]}"
          echo "Matrix: $JSON_MATRIX"
          echo "matrix=$JSON_MATRIX" >> $GITHUB_OUTPUT

  build:
    name: ${{ matrix.u-boot-version }}
    needs: [generate-matrix, notify-begin]
    runs-on: ubuntu-latest
    container: 
      image: debian:bookworm
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}

    steps:
      - name: Setup cache directories
        run: |
          mkdir -p ~/.ccache

      - name: Setup ccache
        uses: actions/cache@v4
        if: always()
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-$-

      - name: Update repo sources
        run: |
          apt-get update

      - name: Install dependencies
        run: |
          apt-get install -y --no-install-recommends --no-install-suggests build-essential bc ccache cpio curl ca-certificates file git make gawk lzop procps rsync u-boot-tools unzip wget
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: "master"
          fetch-depth: "1"

      - name: Download toolchain
        run: |
          wget https://github.com/themactep/thingino-firmware/releases/download/toolchain/thingino-toolchain_xburst1_musl_gcc14-linux-mipsel.tar.gz -O ~/thingino-toolchain_xburst1_musl_gcc14-linux-mipsel.tar.gz
          tar -xf ~/thingino-toolchain_xburst1_musl_gcc14-linux-mipsel.tar.gz -C ~/

      - name: u-boot-ingenic Build
        shell: bash
        run: |
          echo "HASH IS"
          git rev-parse --short ${GITHUB_SHA}
          export GIT_HASH=$(git rev-parse --short ${GITHUB_SHA})
          export GIT_BRANCH=${GITHUB_REF_NAME}
          echo "GIT_HASH=${GIT_HASH}" >> ${GITHUB_ENV}
          echo "GIT_BRANCH=${GIT_BRANCH}" >> ${GITHUB_ENV}

          #cp -f .github/scripts/build.sh build-ci.sh
          VERSION=${{ matrix.u-boot-version }}
          CROSS_COMPILE=~/mipsel-thingino-linux-musl_sdk-buildroot/bin/mipsel-linux- bash build.sh $VERSION

          TIME=$(date -d @${SECONDS} +%M:%S)
          echo "TIME=${TIME}" >> ${GITHUB_ENV}

      - name: Check if compiled u-boot exists
        run: |
          FILE=./uboot_build/u-boot-${{ matrix.u-boot-version }}.bin

          if [ ! -f "$FILE" ]; then
              echo "File not found exit"
              exit 1
          fi

          echo "Found file: $FILE"
          echo "UBOOTFW=$FILE" >> $GITHUB_ENV

      - name: Upload firmware as artifact
        uses: actions/upload-artifact@v4
        with:
          name: u-boot-${{ matrix.u-boot-version }}.bin
          path: ${{ env.UBOOTFW }}

      - name: Upload ${{ matrix.u-boot-version }}
        if: github.event_name != 'pull_request'
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: ${{ env.UBOOTFW }}

      - name: Send build alert
        if: ${{ env.TG_DISABLED != 'true' && env.UBOOTFW }}
        shell: bash
        run: |
          if [[ "${{ github.event.inputs.tg_scratch }}" == 'true' ]]; then
            TG_CHANNEL=${{ env.TG_CHANNEL_SCRATCH }}
          fi
            TG_MSG="Commit: [${GIT_HASH}](https://github.com/${GITHUB_REPOSITORY}/commit/${GIT_HASH})\nBranch: [${GIT_BRANCH}](https://github.com/${GITHUB_REPOSITORY}/tree/${GIT_BRANCH})\nTag: [${TAG_NAME}](https://github.com/${GITHUB_REPOSITORY}/releases/tag/${TAG_NAME})\nTime: ${TIME}\nJob: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n"
            TG_HEADER=$(echo -e "${TG_MSG}\xE2\x9C\x85 GitHub Actions")
            HTTP_FULL=$(curl ${TG_OPTIONS} -H "Content-Type: multipart/form-data" -X POST https://api.telegram.org/bot${TG_TOKEN}/sendDocument -F parse_mode=MarkdownV2 -F chat_id=${TG_CHANNEL} -F caption="${TG_HEADER}" -F document=@${UBOOTFW} -F disable_web_page_preview=true)
            echo "Telegram response Full Firmware: $HTTP_FULL"

      - name: Send error
        if: ${{ env.TG_DISABLED != 'true' && failure() }}
        shell: bash
        run: |
          if [[ "${{ github.event.inputs.tg_scratch }}" == 'true' ]]; then
            TG_CHANNEL=${{ env.TG_CHANNEL_SCRATCH }}
          fi
          TG_WARN="Error: u\\-boot\\-ingenic build failed!\n"
          TG_MSG="Commit: ${GIT_HASH}\nBranch: ${GIT_BRANCH}\nTag: ${TAG_NAME}\nhttps://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n"
          TG_ICON="\xE2\x9A\xA0 GitHub Actions"
          TG_HEADER=$(echo -e ${TG_WARN}${TG_MSG}${TG_ICON})
          HTTP=$(curl ${TG_OPTIONS} -H "Content-Type: multipart/form-data" -X POST https://api.telegram.org/bot${TG_TOKEN}/sendMessage -F chat_id=${TG_CHANNEL} -F text="${TG_HEADER}" -F disable_web_page_preview=true)
          echo Telegram response: ${HTTP}
  
  notify-completion:
    needs: [build, notify-begin]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Setup Environment
        run: |
          echo "TG_DISABLED=${{ github.event.inputs.tg_disabled || 'false' }}" >> $GITHUB_ENV

      - name: Send completion summary
        if: ${{ env.TG_DISABLED == 'false' }}
        run: |
          if [[ "${{ github.event.inputs.tg_scratch }}" == 'true' ]]; then
            TG_CHANNEL=${{ env.TG_CHANNEL_SCRATCH }}
          fi
          START_TIME=${{ needs.notify-begin.outputs.start_time }}
          END_TIME=$(date -u +%s)
          ELAPSED=$((END_TIME - START_TIME))
          ELAPSED_MIN=$((ELAPSED / 60))
          ELAPSED_SEC=$((ELAPSED % 60))
          TG_MSG="u\\-boot\\-ingenic build completed:\nTotal elapsed time: ${ELAPSED_MIN}m ${ELAPSED_SEC}s\nJob: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n"
          TG_ICON="\xF0\x9F\x9A\xA9 GitHub Actions"
          TG_HEADER=$(echo -e ${TG_MSG}${TG_ICON})
          HTTP=$(curl ${TG_OPTIONS} -H "Content-Type: multipart/form-data" -X POST https://api.telegram.org/bot${TG_TOKEN}/sendMessage -F parse_mode=MarkdownV2 -F chat_id=${TG_CHANNEL} -F text="${TG_HEADER}" -F disable_web_page_preview=true)
          echo Telegram response: ${HTTP}
